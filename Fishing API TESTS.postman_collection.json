{
	"info": {
		"_postman_id": "3cd50bdc-88db-440a-a4a6-a3bc4228e89f",
		"name": "Fishing API TESTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25263987"
	},
	"item": [
		{
			"name": "GET All Fish",
			"item": [
				{
					"name": "GET All Fish - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify object properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData[0]).to.have.property(\"id\");\r",
									"     pm.expect(jsonData[0]).to.have.property(\"name\");\r",
									"     pm.expect(jsonData[0]).to.have.property(\"season\");\r",
									"     pm.expect(jsonData[0]).to.have.property(\"habitat\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response does not have empty objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.some(obj => Object.keys(obj).length === 0)).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Fish - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish?season=Winter",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							],
							"query": [
								{
									"key": "season",
									"value": "Winter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Fish - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Invalid season parameter.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish?season=123",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							],
							"query": [
								{
									"key": "season",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Fish - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"An unexpected error occurred. Please try again later.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/500",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"500"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Fish  by ID",
			"item": [
				{
					"name": "GET Fish By ID - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify basic info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql(\"Salmon\");\r",
									"    pm.expect(jsonData.season).to.eql(\"Spring\");\r",
									"    pm.expect(jsonData.habitat).to.eql(\"River\");\r",
									"    pm.expect(jsonData.banPeriod).to.eql(\"March-May\");\r",
									"    pm.expect(jsonData.basicInfo).to.eql(\"A popular freshwater fish.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Fish By ID - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Fish with ID 999 not found.\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Fish By ID - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Invalid fish ID format. ID must be a number.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/abc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"abc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Add New Fish",
			"item": [
				{
					"name": "Add New Fish - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify id is number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Bass\");\r",
									"    pm.expect(jsonData.season).to.eql(\"Summer\");\r",
									"    pm.expect(jsonData.habitat).to.eql(\"Lake\");\r",
									"    pm.expect(jsonData.banPeriod).to.eql(\"June-August\");\r",
									"    pm.expect(jsonData.basicInfo).to.eql(\"A common fish in lakes.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Bass\",\r\n  \"season\": \"Summer\",\r\n  \"habitat\": \"Lake\",\r\n  \"banPeriod\": \"June-August\",\r\n  \"basicInfo\": \"A common fish in lakes.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Fish- 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Name, season, and habitat are required fields.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Fish - 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"A fish with the name 'Salmon' already exists.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Salmon\",\r\n  \"season\": \"Spring\",\r\n  \"habitat\": \"River\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Fish - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Failed to create new fish. Please try again later.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"season\": \"Summer\",\r\n  \"habitat\": \"Lake\",\r\n  \"banPeriod\": \"June-August\",\r\n  \"basicInfo\": \"A common fish in lakes.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT Update Fish",
			"item": [
				{
					"name": "Update Fish - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Updated value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.basicInfo).to.eql(\"Updated info about salmon.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Verify fish name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Salmon\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Salmon\",\r\n  \"season\": \"Autumn\",\r\n  \"habitat\": \"River\",\r\n  \"banPeriod\": \"September-November\",\r\n  \"basicInfo\": \"Updated info about salmon.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Fish - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Fish with ID 999 not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Unknown Fish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish/999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Fish - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Name, season, and habitat cannot be empty.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"season\": \"\",\r\n  \"habitat\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Fish - 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Fish name 'Salmon' is already used by another record.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Salmon\",\r\n  \"season\": \"Summer\",\r\n  \"habitat\": \"Ocean\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/fish/2",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE Fish",
			"item": [
				{
					"name": "DELETE Fish - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Fish - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Fish with ID 999 not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Fish - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Invalid fish ID format. ID must be a number.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/abc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Fish - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + pm.environment.get(\"responseTime\") + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.environment.get(\"responseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error mesage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Failed to delete fish. Please try again later.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/fish/500",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"fish",
								"500"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}